spring:
  security:
    oauth2:
      resourceserver:
        opaquetoken:
          client-id: '{cipher}71e22aba029d0d46bf2dae6fb73aaa1978b95954db022d38b29aad56562cf36a'
          client-secret: '{cipher}4f67824c5620aee14ed465c88a4439e979cc6d8c382368c8f8d5dbf4366b3ca4'
  datasource:
    url: jdbc:postgresql://127.0.0.1:5485/qr_b2b
    username: '{cipher}0b84b55f1f310814983ede6695586aace489dd9a9eb884e85912b5b9fb7754ec'
    password: '{cipher}b7722e056e6493beed02fc3ea6e03df8ff84177ce1ec19af86ae5e3dccb006e2'
  cloud:
    stream:
      kafka:
        binder:
          brokers: localhost:9092,localhost:9093
eureka:
  instance:
    hostname: host.docker.internal
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/
qr-cache:
  redis:
    server:
      host: localhost
      port: 6385
      user: '{cipher}42e261032a00cfb6ffa1bbc9fa9bd0202b7c9988286ee6301b3027f398b3a097'
      password: '{cipher}4f13d55064f69e50d0ea7341eda5d2676a58d96c51261602370c94fc895c5d1e'